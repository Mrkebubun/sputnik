// Generated by CoffeeScript 1.6.3
(function() {
  var Sputnik, ab, events, sputnik, window,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  events = require("events");

  window = require("./autobahn.node");

  ab = window.ab;

  /* UI API*/


  Sputnik = (function(_super) {
    var onOrder, onSafePrice,
      _this = this;

    __extends(Sputnik, _super);

    Sputnik.prototype.markets = {};

    Sputnik.prototype.orders = {};

    Sputnik.prototype.positions = {};

    Sputnik.prototype.margins = {};

    function Sputnik(uri) {
      this.uri = uri;
      this.onChat = __bind(this.onChat, this);
      this.onTrade = __bind(this.onTrade, this);
      this.onBookUpdate = __bind(this.onBookUpdate, this);
      this.onMarkets = __bind(this.onMarkets, this);
      this.onClose = __bind(this.onClose, this);
      this.onOpen = __bind(this.onOpen, this);
      this.wtf = __bind(this.wtf, this);
      this.unsubscribe = __bind(this.unsubscribe, this);
      this.subscribe = __bind(this.subscribe, this);
      this.call = __bind(this.call, this);
      this.chat = __bind(this.chat, this);
      this.withdraw = __bind(this.withdraw, this);
      this.newAddress = __bind(this.newAddress, this);
      this.getAddress = __bind(this.getAddress, this);
      this.cancel = __bind(this.cancel, this);
      this.order = __bind(this.order, this);
      this.authenticate = __bind(this.authenticate, this);
      this.changeProfile = __bind(this.changeProfile, this);
      this.getProfile = __bind(this.getProfile, this);
      this.newAccount = __bind(this.newAccount, this);
      this.unfollow = __bind(this.unfollow, this);
      this.follow = __bind(this.follow, this);
      this.close = __bind(this.close, this);
      this.connect = __bind(this.connect, this);
    }

    /* Sputnik API*/


    Sputnik.prototype.connect = function() {
      return ab.connect(this.uri, this.onOpen, this.onClose);
    };

    Sputnik.prototype.close = function() {
      var _ref;
      return (_ref = this.session) != null ? _ref.close() : void 0;
    };

    Sputnik.prototype.follow = function(market) {
      if (this.session == null) {
        return this.wtf("Not connected.");
      }
      this.subscribe("order_book#" + market, this.onBookUpdate);
      return this.subscribe("trades#" + market, this.onTrade);
    };

    Sputnik.prototype.unfollow = function(market) {
      if (this.session == null) {
        return this.wtf("Not connected.");
      }
      this.unsubscribe("order_book#" + market);
      return this.unsubscribe("trades#" + market);
    };

    Sputnik.prototype.newAccount = function(username, password, email) {
      if (this.session == null) {
        return this.wtf("Not connected.");
      }
      return this.call("make_account", username, password, email);
    };

    Sputnik.prototype.getProfile = function() {};

    Sputnik.prototype.changeProfile = function(password, email, nickname) {};

    Sputnik.prototype.authenticate = function(username, password) {};

    Sputnik.prototype.order = function(ticker, price, quantity) {};

    Sputnik.prototype.cancel = function(ticker, id) {};

    Sputnik.prototype.getAddress = function(contract) {};

    Sputnik.prototype.newAddress = function(contract) {};

    Sputnik.prototype.withdraw = function(contract, address, amount) {};

    Sputnik.prototype.chat = function(message) {};

    /* internal methods*/


    Sputnik.prototype.call = function() {
      var d, method, params, _ref,
        _this = this;
      method = arguments[0], params = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (this.session == null) {
        return this.wtf("Not connected.");
      }
      d = ab.Deferred();
      (_ref = this.session).call.apply(_ref, ["" + this.uri + "/procedures/" + method].concat(__slice.call(params))).then(function(result) {
        if (result.length !== 2) {
          _this.warn("RPC Warning: sputnik protocol violation");
          return d.resolve(result);
        }
        if (result[0]) {
          return d.resolve(result[1]);
        } else {
          return d.reject(result[1]);
        }
      }, function(error) {
        return _this.wtf("RPC Error: " + error.desc);
      });
      return d.promise;
    };

    Sputnik.prototype.subscribe = function(topic, callback) {
      if (this.session == null) {
        return this.wtf("Not connected.");
      }
      return this.session.subscribe("" + this.uri + "/feeds/" + topic, callback);
    };

    Sputnik.prototype.unsubscribe = function(topic) {
      if (this.session == null) {
        return this.wtf("Not connected.");
      }
      return this.session.unsubscribe("" + this.uri + "/feeds/" + topic);
    };

    Sputnik.prototype.log = function(obj) {
      return console.log(obj);
    };

    Sputnik.prototype.warn = function(obj) {
      return console.warn(obj);
    };

    Sputnik.prototype.error = function(obj) {
      return console.error(obj);
    };

    Sputnik.prototype.wtf = function(obj) {
      this.error(obj);
      return this.emit("error", obj);
    };

    Sputnik.prototype.onOpen = function(session) {
      this.session = session;
      this.log("Connected to " + this.uri + ".");
      this.call("list_markets").then(this.onMarkets, this.wtf);
      return this.subscribe("chat", this.onChat);
    };

    Sputnik.prototype.onClose = function(code, reason, details) {
      this.log("Connection lost.");
      return this.emit("close");
    };

    Sputnik.prototype.onMarkets = function(markets) {
      var ticker;
      this.markets = markets;
      for (ticker in markets) {
        this.markets[ticker].trades = [];
        this.markets[ticker].buys = [];
        this.markets[ticker].sells = [];
      }
      return this.emit("ready");
    };

    Sputnik.prototype.onBookUpdate = function(event) {
      var ticker;
      ticker = event.ticker;
      this.markets[ticker].buys = event.buys;
      this.markets[ticker].sells = event.sells;
      return this.emit("book_update", event);
    };

    Sputnik.prototype.onTrade = function(event) {
      var ticker;
      ticker = event.ticker;
      this.markets[ticker].trades.push(event);
      return this.emit("trade", event);
    };

    Sputnik.prototype.onChat = function(event) {
      return this.emit("chat", event);
    };

    onOrder = function() {};

    onSafePrice = function() {};

    return Sputnik;

  }).call(this, events.EventEmitter);

  sputnik = new Sputnik("wss://localhost:8000");

  sputnik.connect();

  sputnik.on("ready", function() {
    sputnik.follow("MXN/BTC");
    return sputnik.on("chat", function(_arg) {
      var message, user;
      user = _arg[0], message = _arg[1];
      return console.log("GUI: " + user + ": " + message);
    });
  });

  sputnik.on("error", function(error) {
    console.error("GUI: " + error);
    return sputnik.close();
  });

}).call(this);
