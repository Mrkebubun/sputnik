#!/usr/bin/python

import os
import sys
import string
from optparse import OptionParser
from ConfigParser import ConfigParser

usage = "usage: %prog [options] generate|read|env"
opts = OptionParser(usage=usage)
opts.add_option("-p", "--profile", dest="profile", help="Profile directory")
(options, args) = opts.parse_args()

profile=None

profile = options.profile or os.environ.get("PROFILE")
if not profile:
    sys.stderr.write("No profile specified.\n")
    sys.stderr.flush()
    sys.exit(1)

if len(args) == 0:
    sys.stderr.write("Please specify a mode.\n")
    sys.stderr.flush()
    sys.exit(1)

mode = args[0]

here = os.path.dirname(os.path.abspath(__file__))
git_root = os.path.abspath(os.path.join(here, "../.."))
templates = os.path.abspath(os.path.join(git_root, "server/config"))

def get_template(name):
    return os.path.join(templates, name + ".template")

parser = ConfigParser()
parser.set("DEFAULT", "git_root", git_root)
parsed = parser.read(os.path.join(profile, "profile.ini"))
if len(parsed) != 1:
    sys.stderr.write("Cannot read profile.\n")
    sys.stderr.flush()
    sys.exit(1)

substitutions = dict(parser.items("profile"))

def generate():
    # make supervisor.conf
    config = open("supervisor.conf", "w")
    with open(get_template("supervisor.conf")) as template_file:
        template = string.Template(template_file.read())
        config.write(template.substitute(substitutions))

    if not parser.getboolean("profile", "disable_bitcoin"):
        config.write("\n")
        with open(get_template("bitcoin.conf")) as template_file:
            template = string.Template(template_file.read())
            config.write(template.substitute(substitutions))

    config.close()
    
    # make sputnik.ini
    config = open("sputnik.ini", "w")
    with open(get_template("sputnik.ini")) as template_file:
        template = string.Template(template_file.read())
        config.write(template.substitute(substitutions))

    config.write("\n")
    if parser.getboolean("profile", "use_sqlite"):
        with open(get_template("sqlite.ini")) as template_file:
            template = string.Template(template_file.read())
            config.write(template.substitute(substitutions))
    else:
        with open(get_template("postgres.ini")) as template_file:
            template = string.Template(template_file.read())
            config.write(template.substitute(substitutions))

    config.close()

    # make bitcoin.conf
    if not parser.getboolean("profile", "disable_bitcoin"):
        config = open("bitcoin.conf", "w")
        with open(get_template("bitcoin.conf")) as template_file:
            template = string.Template(template_file.read())
            config.write(template.substitute(substitutions))

        config.close()

def read(name):
    try:
        print parser.get("profile", name)
    except:
        sys.stderr.write("Variable not found.\n")
        sys.stderr.flush()
        sys.exit(1)

def env():
    for key, value in parser.items("profile"):
        print "export %s=\"%s\"" % (key, value)

if mode == "generate":
    generate()        
elif mode == "read":
    if len(args) != 2:
        sys.stderr.write("Which variable would you like?.\n")
        sys.stderr.flush()
        sys.exit(1)
    read(args[1])
elif mode == "env":
    env()
else:
    sys.stderr.write("Mode not supported.\n")
    sys.stderr.flush()
    sys.exit(1)
    
