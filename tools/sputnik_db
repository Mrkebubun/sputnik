#!/usr/bin/env python

import sys
import os
import argparse

sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)),
    "../server"))

from pepsi import database, models

class UserManager:
    def __init__(self, database):
        self.database = database

    def add(self, username, password=None, email=None, **kwargs):
        pass

    def delete(self, username, **kwargs):
        pass

    def query(self, username, **kwargs):
        matches = self.database.Session().query(models.User).filter_by(
                nickname=username).all()
        if len(matches) == 0:
            sys.stderr.write("Username '%s' not found.\n" % username)
            sys.stderr.flush()
        else:
            user = matches[0]
            print "username: %s" % user.nickname
            print "hash: %s" % user.password_hash
            print "salt: %s" % user.salt
            print "email: %s" % user.email
            print "margin: %s" % user.margin

    def modify(self, username, password=None, email=None, **kwargs):
        pass

    def list(self, **kwargs):
        for user in self.database.Session().query(models.User).all():
            print user.nickname

class ContractManager:
    def __init__(self, database):
        self.database = database

    def add(self, ticker, **kwargs):
        pass

    def delete(self, ticker, **kwargs):
        pass

    def query(self, ticker, **kwargs):
        pass

    def modify(self, ticker, **kwargs):
        pass

    def list(self, **kwargs):
        pass

class DatabaseManager:
    def __init__(self, database):
        self.database = database

    def init(self, **kwargs):
        self.database.Base.metadata.create_all(db.engine, checkfirst=True)

users = UserManager(database)
contracts = ContractManager(database)
tables = DatabaseManager(database)

class SubcommandHelpFormatter(argparse.RawDescriptionHelpFormatter):
    def _format_action(self, action):
        parts = super(argparse.RawDescriptionHelpFormatter, self)._format_action(action)
        if action.nargs == argparse.PARSER:
            parts = "\n".join(parts.split("\n")[1:])
        return parts

parser = argparse.ArgumentParser(description="sputnik database utility.",
    formatter_class=SubcommandHelpFormatter)
subparsers = parser.add_subparsers(metavar="command", title="commands")

parser_init = subparsers.add_parser("init", help="Initialize the database.")
parser_init.set_defaults(scope=tables, method="init")

parser_add = subparsers.add_parser("add", help="Add database entry.",
    formatter_class=SubcommandHelpFormatter)
parser_add.set_defaults(method="add")
parser_add_sub = parser_add.add_subparsers(metavar="entry", title="entries")
user = parser_add_sub.add_parser("user", help="Add a user.")
user.add_argument("username")
user.set_defaults(scope=users)
contract = parser_add_sub.add_parser("contract", help="Add a contract.")
contract.add_argument("ticker")
contract.set_defaults(scope=contracts)

parser_delete = subparsers.add_parser("delete", help="Delete database entry.",
    formatter_class=SubcommandHelpFormatter)
parser_delete.set_defaults(method="delete")
parser_delete_sub = parser_delete.add_subparsers(metavar="entry",
    title="entries")
user = parser_delete_sub.add_parser("user", help="Delete a user.")
user.add_argument("username")
user.set_defaults(scope=users)
contract = parser_delete_sub.add_parser("contract", help="Delete a contract.")
contract.add_argument("ticker")
contract.set_defaults(scope=contracts)

parser_modify = subparsers.add_parser("modify", help="Modify database entry.",
    formatter_class=SubcommandHelpFormatter)
parser_modify.set_defaults(method="modify")
parser_modify_sub = parser_modify.add_subparsers(metavar="entry",
    title="entries")
user = parser_modify_sub.add_parser("user", help="Modify a user.")
user.add_argument("username")
user.set_defaults(scope=users)
contract = parser_modify_sub.add_parser("contract", help="Modify a contract.")
contract.add_argument("ticker")
contract.set_defaults(scope=contracts)

parser_query = subparsers.add_parser("query", help="Query database entry.",
    formatter_class=SubcommandHelpFormatter)
parser_query.set_defaults(method="query")
parser_query_sub = parser_query.add_subparsers(metavar="entry",
    title="entries")
user = parser_query_sub.add_parser("user", help="Query a user.")
user.add_argument("username")
user.set_defaults(scope=users)
contract = parser_query_sub.add_parser("contract", help="Query a contract.")
contract.add_argument("ticker")
contract.set_defaults(scope=contracts)

parser_list = subparsers.add_parser("list", help="List database entries.",
    formatter_class=SubcommandHelpFormatter)
parser_list.set_defaults(method="list")
parser_list_sub = parser_list.add_subparsers(metavar="entry",
    title="entries")
user = parser_list_sub.add_parser("user", help="List users.")
user.set_defaults(scope=users)
contract = parser_list_sub.add_parser("contract", help="List contracts.")
contract.add_argument("ticker")
contract.set_defaults(scope=contracts)

args = parser.parse_args()
method = getattr(args.scope, args.method)
method(**vars(args))

